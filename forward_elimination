import matplotlib.pyplot as plt  # only used if plot is enabled

def forward_elimination(A, b):
    """
    Performs Gaussian elimination (forward phase) on matrix A and vector b.

    Parameters:
    -----------
    A : list of list of float
        Coefficient matrix (n x n).
    b : list of float
        Right-hand side vector (length n).

    Returns:
    --------
    tuple: (new_A, new_b)
        Transformed upper-triangular matrix and updated RHS vector.

    Raises:
    -------
    ValueError: If matrix is singular or dimensions mismatch.
    """
    n = len(A)
    if any(len(row) != n for row in A):
        raise ValueError("Matrix A must be square.")
    if len(b) != n:
        raise ValueError("Vector b length must match matrix A size.")

    # Deep copy to avoid changing original data
    A = [row[:] for row in A]
    b = b[:]

    for i in range(n):
        # Pivot check
        if A[i][i] == 0:
            raise ValueError(f"Zero pivot encountered at row {i}. Try pivoting.")

        for j in range(i+1, n):
            factor = A[j][i] / A[i][i]
            for k in range(i, n):
                A[j][k] -= factor * A[i][k]
            b[j] -= factor * b[i]

    return A, b

def back_substitution(U, y):
    """
    Performs back substitution to solve Ux = y.

    Parameters:
    -----------
    U : list of list of float
        Upper-triangular matrix (n x n).
    y : list of float
        Right-hand side vector (length n).

    Returns:
    --------
    list of float
        Solution vector x.
    """
    n = len(U)
    x = [0.0] * n

    for i in range(n-1, -1, -1):
        if U[i][i] == 0:
            raise ValueError(f"Zero diagonal element at row {i}, cannot divide.")

        sum_ = sum(U[i][j] * x[j] for j in range(i+1, n))
        x[i] = (y[i] - sum_) / U[i][i]

    return x

def gaussian_elimination(A, b):
    """
    Solves Ax = b using Gaussian elimination (no pivoting).

    Parameters:
    -----------
    A : list of list of float
        Coefficient matrix.
    b : list of float
        Right-hand side vector.

    Returns:
    --------
    list of float
        Solution vector x.
    """
    U, y = forward_elimination(A, b)
    return back_substitution(U, y)

def plot_solution(x):
    """
    Plots the solution vector x as a bar chart.

    Parameters:
    -----------
    x : list of float
        Solution vector.
    """
    indices = list(range(len(x)))
    plt.bar(indices, x)
    plt.xlabel("Variable Index")
    plt.ylabel("Value")
    plt.title("Solution Vector x")
    plt.grid(True)
    plt.tight_layout()
    plt.show()

# ============================
# Example use with edge case handling
# ============================

def main():
    A = [
        [2, 1, -1],
        [-3, -1, 2],
        [-2, 1, 2]
    ]

    b = [8, -11, -3]

    try:
        x = gaussian_elimination(A, b)
        print("Solution vector x:", x)

        # Optional: show graph
        show_graph = True
        if show_graph:
            plot_solution(x)

    except Exception as e:
        print("Error:", e)

if __name__ == "__main__":
    main()
