import math


def simpson(f, a, b, n):
    """
    Approximates the integral of a function f over [a, b] using Simpson's Rule.

    Simpson's Rule requires that n is even, and uses parabolic interpolation.

    Parameters:
        f (function): Function to integrate.
        a (float): Lower limit of integration.
        b (float): Upper limit of integration.
        n (int): Number of subintervals (must be even).

    Returns:
        float: Approximate value of the definite integral.
    """
    if n % 2 != 0:
        raise ValueError("n must be even for Simpson's Rule.")

    h = (b - a) / n
    total = f(a) + f(b)

    # Sum f(x) at odd indices (4*f(x))
    for i in range(1, n, 2):
        total += 4 * f(a + i * h)

    # Sum f(x) at even indices (2*f(x))
    for i in range(2, n, 2):
        total += 2 * f(a + i * h)

    return (h / 3) * total


def select_function(choice):
    """
    Maps user's choice to a predefined function.

    Parameters:
        choice (str): '1' for sin(x), '2' for x^2, '3' for exp(x)

    Returns:
        tuple: (function, function name, exact value if known or None)
    """
    if choice == "1":
        return lambda x: math.sin(x), "sin(x)", 2.0  # ∫sin(x) from 0 to π
    elif choice == "2":
        return lambda x: x ** 2, "x^2", None  # ∫x^2 from a to b = (b^3 - a^3)/3
    elif choice == "3":
        return lambda x: math.exp(x), "exp(x)", None  # ∫exp(x) from a to b = e^b - e^a
    else:
        raise ValueError("Invalid function choice")


if __name__ == "__main__":
    print("Simpson’s Rule – Numerical Integration\n")

    # Prompt user for function choice
    print("Choose a function to integrate:")
    print("1. sin(x)     from 0 to pi        (expected ≈ 2.0)")
    print("2. x^2        from a to b         (expected = (b^3 - a^3)/3)")
    print("3. exp(x)     from a to b         (expected = e^b - e^a)")

    choice = input("Enter your choice (1/2/3): ").strip()
    a = float(input("Enter lower limit a: "))
    b = float(input("Enter upper limit b: "))
    n = int(input("Enter number of subintervals (even number): "))

    if n % 2 != 0:
        print("Number of subintervals must be even. Exiting.")
        exit(1)

    try:
        f, fname, true_val = select_function(choice)

        # Compute exact value if known
        if true_val is None:
            if choice == "2":
                true_val = (b ** 3 - a ** 3) / 3
            elif choice == "3":
                true_val = math.exp(b) - math.exp(a)

        # Compute approximate integral
        approx = simpson(f, a, b, n)

        # Print results
        print(f"\nIntegrating {fname} from {a} to {b} using {n} subintervals.")
        print(f"Approximate integral: {approx:.10f}")
        if true_val is not None:
            error = abs(approx - true_val)
            print(f"Exact value:          {true_val:.10f}")
            print(f"Absolute error:       {error:.10e}")

    except ValueError as e:
        print("Error:", e)
